// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PersonType {
  ATTORNEY
  PARALEGAL
  VENDOR
  PROJECT_MANAGER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MatterStatus {
  COLLECTION
  CULLING
  REVIEW
  PRODUCTION
  INACTIVE
}

enum OrganizationType {
  CURRENT_LAW_FIRM
  CO_COUNSEL
  OPPOSING_COUNSEL
  VENDOR
  THIRD_PARTY
  CLIENT
}

enum SignedBy {
  PROJECT_MANAGER
  PARTNER
  CLIENT
}

enum InvoiceStatus {
  RECEIVED
  SUBMITTED
  QUESTION
  PAID
}

enum CollectionStatus {
  DISCUSSING
  SCHEDULED
  IN_PROGRESS
  COMPLETED
}

enum CollectionType {
  EMAIL
  MOBILE
  COMPUTER
  OTHER
}

enum EmailPlatform {
  OUTLOOK
  GMAIL
  OTHER
}

enum WorkspaceType {
  ECA
  REVIEW
  RSMF
  OTHER
}

model Organization {
  id              Int              @id @default(autoincrement())
  name            String
  type            OrganizationType
  email           String?
  phone           String?
  website         String?
  streetAddress   String?
  city            String?
  state           String?
  zipCode         String?
  country         String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relationships
  people          Person[]
  estimates       Estimate[]
  vendorAgreements VendorAgreement[]
  invoices        Invoice[]
  collections     Collection[]
  custodians      Custodian[]
  workspaces      Workspace[]
  contractReviews ContractReview[]
}

model Person {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  company        String?
  role           String?
  type           PersonType?  // Add back the type field
  organizationId Int?         // Optional organization assignment
  notes          String?
  streetAddress  String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relationships
  organization        Organization?  @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  ownedTasks          Task[]         @relation("TaskOwner")
  assignedTasks       Task[]         @relation("TaskAssignees")
  clientAttorney      Client[]       @relation("ClientAttorney")
  clientParalegal     Client[]       @relation("ClientParalegal")
  clientProjectManager Client[]      @relation("ClientProjectManager")
  matterPersons       MatterPerson[]
  user                User?          // Optional relationship with User
  contractReviews     ContractReview[] // Contract reviews managed by this person
}

model Client {
  id              Int      @id @default(autoincrement())
  clientName      String
  clientNumber    String   @unique // 7-digit client number
  attorneyId      Int?     // Optional attorney assigned to client
  paralegalId     Int?     // Optional paralegal assigned to client
  projectManagerId Int?    // Optional project manager assigned to client
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  matters         Matter[]
  
  // Relationships with people
  attorney        Person?  @relation("ClientAttorney", fields: [attorneyId], references: [id])
  paralegal       Person?  @relation("ClientParalegal", fields: [paralegalId], references: [id])
  projectManager  Person?  @relation("ClientProjectManager", fields: [projectManagerId], references: [id])
}

model Matter {
  id           Int          @id @default(autoincrement())
  matterName   String
  matterNumber String       @unique // 6-digit matter number
  status       MatterStatus @default(COLLECTION)
  clientId     Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  people       MatterPerson[]
  tasks        Task[]
  estimates    Estimate[]
  vendorAgreements VendorAgreement[]
  invoices     Invoice[]
  collections  Collection[]
  workspaces   Workspace[]
  custodians   Custodian[]
  contractReviews ContractReview[]
}

model MatterPerson {
  id       Int    @id @default(autoincrement())
  matterId Int
  personId Int
  role     String? // Optional role description (e.g., "Lead Attorney", "Document Review")
  
  matter   Matter @relation(fields: [matterId], references: [id], onDelete: Cascade)
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  
  @@unique([matterId, personId])
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  matterId    Int?         // Optional matter assignment
  ownerId     Int          // Required task owner
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relationships
  matter      Matter?      @relation(fields: [matterId], references: [id], onDelete: Cascade)
  owner       Person       @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assignees   Person[]     @relation("TaskAssignees")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  firstName String
  lastName  String
  personId  Int?     @unique // Optional link to a Person
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship with person
  person    Person?  @relation(fields: [personId], references: [id], onDelete: SetNull)
}

model Estimate {
  id              Int          @id @default(autoincrement())
  description     String       // Text area for estimate details
  totalCost       Float        // Dollar amount for total estimated cost
  matterId        Int          // Required matter assignment
  organizationId  Int          // Required vendor organization
  contractReviewId Int?        // Optional contract review assignment
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relationships
  matter          Matter       @relation(fields: [matterId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contractReview  ContractReview? @relation(fields: [contractReviewId], references: [id], onDelete: SetNull)
  vendorAgreements VendorAgreement[] // Optional relationship with vendor agreements
  invoices        Invoice[]    // Relationship with invoices
}

model VendorAgreement {
  id              Int          @id @default(autoincrement())
  agreementText   String       // Text area for agreement details
  signedBy        SignedBy     // Who signed the agreement
  matterId        Int          // Required matter assignment
  organizationId  Int          // Required vendor organization
  estimateId      Int?         // Optional estimate connection
  contractReviewId Int?        // Optional contract review assignment
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  
  // Relationships
  matter          Matter       @relation(fields: [matterId], references: [id], onDelete: Cascade)
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  estimate        Estimate?    @relation(fields: [estimateId], references: [id], onDelete: SetNull)
  contractReview  ContractReview? @relation(fields: [contractReviewId], references: [id], onDelete: SetNull)
  invoices        Invoice[]    // Invoices linked to this agreement
}

model Invoice {
  id                  Int               @id @default(autoincrement())
  invoiceDate         DateTime          // Date of the invoice
  invoiceAmount       Float             // Dollar amount of the invoice
  approved            Boolean           @default(false) // Whether invoice is approved
  status              InvoiceStatus     @default(RECEIVED) // Invoice status
  matterId            Int               // Required matter assignment
  organizationId      Int               // Required vendor organization
  estimateId          Int?              // Optional estimate connection
  vendorAgreementId   Int?              // Optional vendor agreement connection
  contractReviewId    Int?              // Optional contract review assignment
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relationships
  matter              Matter            @relation(fields: [matterId], references: [id], onDelete: Cascade)
  organization        Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  estimate            Estimate?         @relation(fields: [estimateId], references: [id], onDelete: SetNull)
  vendorAgreement     VendorAgreement?  @relation(fields: [vendorAgreementId], references: [id], onDelete: SetNull)
  contractReview      ContractReview?   @relation(fields: [contractReviewId], references: [id], onDelete: SetNull)
}

model Custodian {
  id              Int           @id @default(autoincrement())
  name            String        // Name of the custodian
  email           String?       // Optional email address
  department      String?       // Optional department
  title           String?       // Optional job title
  streetAddress   String?       // Optional street address
  city            String?       // Optional city
  state           String?       // Optional state
  zipCode         String?       // Optional zip code
  organizationId  Int           // Required organization (usually client)
  matterId        Int           // Required matter assignment
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  organization    Organization  @relation(fields: [organizationId], references: [id])
  matter          Matter        @relation(fields: [matterId], references: [id], onDelete: Cascade)
  collections     CollectionCustodian[] // Collections for this custodian via junction table
}

model Collection {
  id              Int               @id @default(autoincrement())
  status          CollectionStatus  @default(DISCUSSING) // Collection status
  type            CollectionType    // Type of collection (Email, Mobile, etc.)
  platform        EmailPlatform?    // Optional platform for email collections
  scheduledDate   DateTime?         // Optional scheduled date
  completedDate   DateTime?         // Optional completed date
  notes           String?           // Optional notes
  matterId        Int               // Required matter assignment
  organizationId  Int?              // Optional vendor organization
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relationships
  matter          Matter            @relation(fields: [matterId], references: [id], onDelete: Cascade)
  organization    Organization?     @relation(fields: [organizationId], references: [id], onDelete: SetNull)
  custodians      CollectionCustodian[] // Many-to-many relationship with custodians
}

model CollectionCustodian {
  id           Int        @id @default(autoincrement())
  collectionId Int
  custodianId  Int
  createdAt    DateTime   @default(now())
  
  // Relationships
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  custodian    Custodian  @relation(fields: [custodianId], references: [id], onDelete: Cascade)
  
  @@unique([collectionId, custodianId])
}

model Workspace {
  id              Int           @id @default(autoincrement())
  url             String        // Relativity workspace URL
  type            WorkspaceType // Workspace type (ECA, REVIEW, RSMF, OTHER)
  matterId        Int           // Required matter assignment
  organizationId  Int           // Required organization (hosted by)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relationships
  matter          Matter        @relation(fields: [matterId], references: [id], onDelete: Cascade)
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  contractReviews ContractReview[] // Contract reviews using this workspace
}

model ContractReview {
  id                    Int               @id @default(autoincrement())
  reviewDocumentCount   Int               // Number of documents in review
  matterId              Int               // Required matter assignment
  vendorOrganizationId  Int               // Required vendor organization
  reviewManagerId       Int?              // Optional review manager (person from vendor)
  workspaceId           Int               // Required workspace assignment
  status                String            @default("Discussing") // Status: Discussing, In Progress, Completed
  startDate             DateTime?         // Optional start date
  endDate               DateTime?         // Optional end date
  batchTitle            String?           // Optional title for this contract review batch
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  
  // Relationships
  matter                Matter            @relation(fields: [matterId], references: [id], onDelete: Cascade)
  vendorOrganization    Organization      @relation(fields: [vendorOrganizationId], references: [id], onDelete: Cascade)
  reviewManager         Person?           @relation(fields: [reviewManagerId], references: [id], onDelete: SetNull)
  workspace             Workspace         @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  estimates             Estimate[]        // Optional estimates
  vendorAgreements      VendorAgreement[] // Optional agreements
  invoices              Invoice[]         // Optional invoices
}