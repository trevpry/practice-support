// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum PersonType {
  ATTORNEY
  PARALEGAL
  VENDOR
  PROJECT_MANAGER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Person {
  id             Int          @id @default(autoincrement())
  firstName      String
  lastName       String
  email          String?
  phone          String?
  company        String?
  role           String?
  type           PersonType?  // Add back the type field
  notes          String?
  streetAddress  String?
  city           String?
  state          String?
  zipCode        String?
  country        String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relationships
  ownedTasks     Task[]         @relation("TaskOwner")
  assignedTasks  Task[]         @relation("TaskAssignees")
  clientAttorney Client[]       @relation("ClientAttorney")
  clientParalegal Client[]      @relation("ClientParalegal")
  matterPersons  MatterPerson[]
  user           User?          // Optional relationship with User
}

model Client {
  id           Int      @id @default(autoincrement())
  clientName   String
  clientNumber String   @unique // 7-digit client number
  attorneyId   Int?     // Optional attorney assigned to client
  paralegalId  Int?     // Optional paralegal assigned to client
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  matters      Matter[]
  
  // Relationships with people
  attorney     Person?  @relation("ClientAttorney", fields: [attorneyId], references: [id])
  paralegal    Person?  @relation("ClientParalegal", fields: [paralegalId], references: [id])
}

model Matter {
  id           Int      @id @default(autoincrement())
  matterName   String
  matterNumber String   @unique // 6-digit matter number
  clientId     Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  client       Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  people       MatterPerson[]
  tasks        Task[]
}

model MatterPerson {
  id       Int    @id @default(autoincrement())
  matterId Int
  personId Int
  role     String? // Optional role description (e.g., "Lead Attorney", "Document Review")
  
  matter   Matter @relation(fields: [matterId], references: [id], onDelete: Cascade)
  person   Person @relation(fields: [personId], references: [id], onDelete: Cascade)
  
  @@unique([matterId, personId])
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  matterId    Int?         // Optional matter assignment
  ownerId     Int          // Required task owner
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  // Relationships
  matter      Matter?      @relation(fields: [matterId], references: [id], onDelete: Cascade)
  owner       Person       @relation("TaskOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  assignees   Person[]     @relation("TaskAssignees")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  email     String   @unique
  firstName String
  lastName  String
  personId  Int?     @unique // Optional link to a Person
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relationship with person
  person    Person?  @relation(fields: [personId], references: [id], onDelete: SetNull)
}